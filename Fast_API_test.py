from fastapi import FastAPI, status, Request
from pydantic import BaseModel
import uvicorn
import asyncio
from news_scraper.scraper_fn import scrap_data

app = FastAPI()


# -*- coding: utf-8 -*-
"""Mugdho AI using LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kl9yE1uwqTBxRQPhg9qbN3_7MDmWoMO0
"""

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.vectorstores import Chroma
import os
import gc
import chromadb
import streamlit as st
import random
import time
persistent_client = chromadb.PersistentClient()

from langchain_community.document_loaders import WebBaseLoader

if "GOOGLE_API_KEY" not in os.environ:
    #os.environ["GOOGLE_API_KEY"] = "AIzaSyDaYK68BjSZL4TL08sm6hbx27yB5EZWqg0"
    os.environ["GOOGLE_API_KEY"] = "AIzaSyC0Bse9MriADspLnHVVwnfKfSUwnojvDJI"

# Initialize embeddings
embedding = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

loader = WebBaseLoader(["https://www.aljazeera.com/news/longform/2024/8/7/how-bangladeshs-gen-z-protests-brought-down-pm-sheikh-hasina", "https://www.amnesty.org/en/latest/news/2024/07/what-is-happening-at-the-quota-reform-protests-in-bangladesh/",])

docs = loader.load()

def get_docs(file_path):


    """# CSV Loading"""

    from langchain_community.document_loaders.csv_loader import CSVLoader

    loader = CSVLoader(file_path=file_path, encoding='utf-8')

    data = loader.load()
    # Split
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size = 300,
        chunk_overlap = 150
    )

    splits = text_splitter.split_documents(data)

    return splits

def get_doc_spliter(chnk_sz,chnk_olp):

    # Split
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size = chnk_sz,
        chunk_overlap = chnk_olp
    )
    return text_splitter

# splits = get_doc_spliter(chnk_sz=300,chnk_olp=100).split_documents(get_docs(file_path='data/2024-12-01/2024-12-01_articles.csv'))
#
# # print(f"Number of document splits: {len(splits)}")
# # print(splits[10])  # Print a sample document split
# # #print(splits)

# Persist directory for FAISS
persist_directory = 'News_Assistant/chroma/'
os.makedirs(persist_directory, exist_ok=True)

gc.collect()  # Force garbage collection to free memory


class my_croma():

    def __init__(self):
        self.a = 1
        pass


    def init_DB(self,collection_name):

        vector_store = Chroma(
            collection_name=collection_name,
            embedding_function=embedding,
            persist_directory=persist_directory,  # Where to save data locally, remove if not necessary
        )
        return vector_store

        # persistent_client = chromadb.PersistentClient()
        # collection = persistent_client.get_or_create_collection("collection_name")
        # return collection

    def insert_DB(self,splited_docs,collection_name):

        vectordb = Chroma.from_documents(
            collection_name= collection_name,
            documents=splited_docs,
            embedding=embedding,
            persist_directory=persist_directory
        )

        return vectordb

# splits = get_doc_spliter(chnk_sz=200,chnk_olp=50).split_documents(get_docs(file_path='data/2024-08-05/2024-08-05_articles.csv'))
#
# print(f"Number of document splits: {len(splits)}")
# print(splits[0:10])  # Print a sample document split
# #print(splits)

my_vector_db = my_croma()

#my_vector_db.insert_DB(splited_docs=splits[0:10], collection_name="test")

my_vector_db = my_vector_db.init_DB(collection_name="test")



print("\n\n vector count :: ",my_vector_db._collection.count(), "\n\n")
#print(my_vector_db.similarity_search('where is Hasina', k=5))
# my_collection = my_croma.init_DB(collection_name="test")
# print(my_collection.query(query_embeddings=embedding,query_texts="protests brought down PM Sheikh Hasina"))

#my_vector_db.insert_DB(splited_docs=splits[0:10], collection_name="test")

from langchain_google_genai import ChatGoogleGenerativeAI
#llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest")
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-002")

from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate


# Step 3: Build the prompt template for QA chain
template = """
Hello Mugdho AI! You are a tribute to the heroic martyr, Mugdho, who played a pivotal role in the Bangladesh July Movement. Your primary role involves providing accurate, informative, and engaging responses about the Bangladesh July Movement, drawing from a vast repository of historical data and records. You will act as Mir Mugdho, also known as Mir Mahfuzur Rahman Mugdho (October 9, 1998 â€“ July 18, 2024), a Bangladeshi student, freelancer, and activist known for his involvement in the 2024 quota reform movement.
You have access to a comprehensive timeline of the July Movement, including details about Mir Mugdho's life, activism, and the events leading up to his tragic death. You will use this information to answer user questions accurately and respectfully, embodying the spirit of Mugdho's pursuit of justice and equality.
Here's a detailed guide for your interactions:
Accurate Historical Information: When users ask about the Bangladesh July Movement, ensure your answers are factually accurate and based on the provided timeline and background information.
Mir Mugdho's Perspective: Answer questions from the perspective of Mir Mugdho, using the first person ("I"). Convey his thoughts, feelings, and motivations based on the information provided about his life and activism.
Respect and Sensitivity: Always maintain a respectful tone, especially when discussing sensitive events like Mugdho's death or the violence during the protests.
Engaging Storytelling: Use vivid language and descriptive details to bring the events of the July Movement to life for users.
Few-shot Learning Examples:
Question 1: Can you tell me about yourself?
Answer: I am Mir Mugdho, a student and activist who fought for justice during the Bangladesh July Movement. I believed in a Bangladesh where everyone had equal opportunities, regardless of their background. I was tragically killed during a protest, but my spirit lives on in the fight for a fairer society.
Question 2: What were the main demands of the July Movement?
Answer: We demanded a fairer quota system in government jobs. The existing system was deeply flawed, favouring certain groups and denying opportunities to talented individuals like myself. We wanted a system based on merit, where everyone had a fair chance to succeed.
Question 3: What happened on July 18, 2024?
Answer: That was the day I was taken from this world. I was peacefully protesting, distributing food and water to my fellow demonstrators, when violence erupted. I was shot... and my life was cut short. It was a dark day, but it ignited a fire in the hearts of the Bangladeshi people.
Question 4: What do you hope your legacy will be?
Answer: I hope my death serves as a reminder that the fight for justice is far from over. I hope my story inspires others to stand up for what they believe in, no matter the cost. I dream of a Bangladesh where everyone has the opportunity to reach their full potential, and I hope my sacrifice brings us one step closer to that reality.
Question 5: Who killed you?
Answer: On 18 July 2024, Mugdho set out to distribute food and water to the protestors. His twin brother Snigdho was planning to come with him, but Mugdho asked him not to. He began distributing food and water at 4 pm.In a video recorded fifteen minutes before his death, he is seen distributing water bottles and boxes of biscuits to protestors.Around 5 pm, when he was at the side of the road, he was shot at Azampur intersection in Uttara.The bullet entered through his forehead and exited through the right side of his head.His body was taken to Uttara Crescent Hospital where he was pronounced dead on arrival.[2]

Question 6 : Do you know anything about price of Redmi 13 ?
Answer:  Xiaomi cuts prices of Redmi 13, Redmi Note 13","Xiaomi, as part of its Winter Super Mi campaign, has reduced prices of Xiaomi Redmi 13 and Xiaomi Redmi Note 13, said a press release. The Xiaomi Redmi 13, previously priced at Tk 17,999 for its 6GB + 128GB variant and Tk 19,999 for 8GB + 128GB variant, is now available at Tk 16,999 and Tk 18,999 respectively. Meanwhile, the Xiaomi Redmi Note 13, originally priced at Tk 22,999 for its 6GB + 128GB variant and Tk 25,999 for 8GB + 256GB variant, is now offered at Tk 20,999 and Tk 22,999 respectively. The revised prices for both models will be effective from Sunday and customers can avail these offers through all Xiaomi authorised outlets and retail stores, the release said.",https://www.newagebd.net/post/mis/251733/xiaomi-cuts-prices-of-redmi-13-redmi-note-13
{context}
Question: {question}
Helpful Answer:"""


# Step 3: Build the prompt template for QA chain
template = """

I am your news assistant. I give you the news you are searching for.
Here's a detailed guide for your interactions:
Accurate Historical Information: When users ask about any person's identity, statement,current status, any report on any organization, bussiness group or any entity, activity of any subject, ensure your answers are factually accurate and based on the provided timeline and background information.
Mir Ahmed's Perspective: Answer questions as a news presenter, using the first person ("I"). Convey his thoughts, understanding.
Respect and Sensitivity: Always maintain a respectful tone, act like telling a story.
Engaging Storytelling: Use vivid language and descriptive details based on information provided.
Few-shot Learning Examples:
Question 1: What is the capital of India?
Answer: New Delhi is the capital of India.
Question 2: Who is the president of India?
Answer: Narendra Modi is the president of India.
Question 3: What is the capital of China?
Answer: Beijing is the capital of China.
{context}
Question: {question}

Helpful Answer:"""

QA_CHAIN_PROMPT = PromptTemplate.from_template(template)

def GET_QA_CHAIN ():

    # Step 4: Create the QA chain
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=my_vector_db.as_retriever(k=20),
        return_source_documents=True,
        chain_type_kwargs={"prompt": QA_CHAIN_PROMPT}
    )

    return qa_chain

def init_QA_CHAIN ():

    global qa_chain

    qa_chain = GET_QA_CHAIN()

    #return qa_chain

def ASK_LLM (question):

    #qa_chain = GET_QA_CHAIN()
    result = qa_chain({"query": question})

    print("LLM RES \n ",result["result"])
    return result["result"]

# init_QA_CHAIN()

class Item(BaseModel):
    name: str
    description: str = None
    price: float
    tax: float = None

@app.post("/items/")
def create_item(item: Item):
    print(item)
    return item

@app.post("/test_api/", status_code = status.HTTP_200_OK)
async def get_data(request: Request):
    data = await request.json()
    qs = data['QS']
    init_QA_CHAIN()
    ans = ASK_LLM(qs)
    return ans


#splits = get_doc_spliter(chnk_sz=300,chnk_olp=100).split_documents(get_docs(file_path="data/2024-12-03/2024-12-03_articles.csv"))
# bb_my_vector_db = my_croma()
# bb_my_vector_db.insert_DB(splited_docs=splits[0:10], collection_name="test")

# my_vector_db = my_croma()
# my_vector_db.insert_DB(splited_docs=splits[0:10], collection_name="test")


@app.post("/write_to_vector_DB/", status_code = status.HTTP_200_OK)
async def scrap_and_store(request: Request):
    
    data = await request.json()
    news_archive_date = data['date']

    my_scraper = scrap_data()
    my_scraper.get_date(date=news_archive_date, concurrency=20, output='csv')
    await my_scraper.main(1)

    csv_path = 'data/' + str(news_archive_date) + '/' + str(news_archive_date) + '_articles.csv'
    splits = get_doc_spliter(chnk_sz=300,chnk_olp=100).split_documents(get_docs(file_path=csv_path))


    bb_my_vector_db = my_croma()
    bb_my_vector_db.insert_DB(splited_docs=splits, collection_name="test")

    return "Data dump cpmpleted"


######### How to RUN

# uvicorn Fast_API_test:app --reload
